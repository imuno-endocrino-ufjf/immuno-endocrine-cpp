name: Compile and Release Project

on:
  push:
    branches: [$default-branch, github-actions]
  pull_request:
    branches: [$default-branch]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [release, debug]

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Clone current vcpkg version
        run: git clone https://github.com/microsoft/vcpkg "${{ github.workspace }}/vcpkg"

      - name: Setup MSVC on Windows
        uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-latest'

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Create CMakeUserPresets.json
        run: |
          touch ${{ github.workspace }}/CMakeUserPresets.json
          echo '{
              "version": 2,
              "configurePresets": [
                {
                  "name": "release",
                  "inherits": "vcpkg-release",
                  "environment": {
                    "VCPKG_ROOT": "./vcpkg"
                  }
                },
                {
                  "name": "debug",
                  "inherits": "vcpkg-debug",
                  "environment": {
                    "VCPKG_ROOT": "./vcpkg"
                  }
                }
              ]
            }' > ${{ github.workspace }}/CMakeUserPresets.json
          cat ${{ github.workspace }}/CMakeUserPresets.json

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake --preset=${{ matrix.build_type }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }}
